
val initPosition: Position = Position(move.from.column, move.from.row)
val finalPosition: Position = Position(move.to.column, move.to.row)
val gameState: GameState = adapter.getLastState()
val board: Board = gameState.getBoardHistory().last()
val turnManager: TurnManager = gameState.getTurnManager()
if (!board.getPositionMap().containsKey(initPosition)) return InvalidMove("There's nothing there")
else {
    val pieceToMove = board.getPieceByPosition(initPosition)!!
    if (pieceToMove.pieceColor != turnManager.getCurrentPlayer()) {
        return InvalidMove("It's " + turnManager.getCurrentPlayer() + "'s Turn!")
    } else {
        val newBoard: Board = pieceMover.moveTo(pieceToMove, finalPosition, gameState.getBoardHistory().last())
        if (newBoard == gameState.getBoardHistory().last()) {
            return InvalidMove("Invalid movement for " +
                    pieceToMove.id.takeWhile { it.isLetter() })
        }
        if (kingIsDeadValidator.validate(board) is GameOver
            && board.getBoardType() != BoardType.CHECKERS ) {
            if (turnManager.getCurrentPlayer() == Color.WHITE) {
                return GameOver(adapter.colorAdapter(Color.BLACK))
            } else return GameOver(adapter.colorAdapter(Color.WHITE))
        }

        val history: List<Board> = createHistoryFromBoard(newBoard)
        val advanceTurn = turnManager.nextTurn(pieceToMove.pieceColor)

        adapter.saveHistory(GameState(advanceTurn, history))

        return NewGameState(
            adapter.pieceListAdapter(newBoard),
            adapter.colorAdapter(advanceTurn.getCurrentPlayer())
        )
    }
}